The purpose of this program is to visualise the orbits of linear cellular automata--either vectors being repeatedly multiplied by some matrix, mod some modulus, or matrices being multiplied by themselves mod some modulus. It does so by representing the set of all vectors/matrices mod some modulus as coloured squares on a grid. The colours then change depending on the setup to showcase how the vectors/matrices behave. To run the program, run orbitvis.py directly. Make sure you have PyGame set up with your Python distribution (PyGame 1.9.6 was used for testing, though other versions should also work).

The main form of interaction with the program is by pressing the arrow keys, which perform different actions depending on the CMODE that's active (see below). These tasks can take a long time depending on the automata being visualised.

The S key takes a screenshot of the current plane and places it in the working directory.

~~~

In order to run ORBITVIS in its current form, LINCELLAUT's object files, an update matrix file (for certain modes), and a shared library file all must be placed in ORBITVIS' directory, and the path to the folder containing these files must be specified in the .config file. Otherwise, ORBITVIS won't be able to perform any of the calculations required for generating its visualisations. If running Windows, the required shared library files can be compiled by running the script "makeshare.ps1" in LINCELLAUT's directory. 

If you encounter the error "OSError: [WinError 193] %1 is not a valid Win32 application" when running, the shared library was probably compiled into a 32-bit library (this is what MinGW's gcc does) while the Python version you're using is 64-bit. Using a 32-bit install of Python should fix the issue.

See LINCELLAUT's documentation for more details.

~~~

There are multiple different colouring modes to use with ORBITVIS, each having specific use cases. They can be toggled by setting the "colormode" and "colortransient" keys in the .config file (see .config specs file). Information regarding these colour modes can be found in the "Colour Modes" documentation file.

~~~

ORBITVIS also has a couple different ARRANGEMENT values, which dictate how matrices are iterated through from screen to screen on iterall mode.

"nondiag" : the off-diagonal entries of the update matrix are changed whenever the arrow keys are pressed. Up/down changes the bottom left entry, while left/right will change the top right. The diagonal entries are incremented across each screen through all possible values.

"diag" : the diagonal entries of the update matrix are changed whenever the arrow keys are pressed. Up/down changes the top left entry, while left/right will change the bottom right. The off-diagonal entries are incremented across each screen through all possible values.

~~~

There are four different computation modes for traversing orbits. These can be toggled with the "cmode" key in the .config file. 

"iterplane" makes use of LINCELLAUT's codebase to generate vector orbits on the fly. The modulus used must be manually input into ORBITVIS' .config file (see LINCELLAUT's documentation on .config files for more info). The right arrow key increases the iteration count by 1, while the left arrow resets the iterations to zero.

"iterstate" calculates orbits on the fly like iterplane, but the vectors' current states are saved each generation. The arrow keys behave the same as they did for iterplane.

"iterstate" and "iterplane" are two different modes for legacy reasons. In the future, it's likely that iterstate will be scrapped completely in favour of iterplane (since it requires less memory overall).

"cycles" simply colours vectors based on their orbit length--that is, the time it takes for a vector to iterate back to itself. The brighter the square, the higher the orbit length.

"iterall" is a completely different visualisation from the previous two. Iterall calculates the transient and cycle lengths for ALL possible matrices, and represents each matrix's values as a coloured square. The arrow keys for this mode are used to change the range of matrices displayed to the screen. By default, the diagonal entries of the update matrix are incremented on each screen as you move along the orthogonal axes. The off diagonal entries remain fixed on each screen. Pressing the up/down keys will change the bottom left entry of the matrix, while the left/right keys will change the top right entry. This behaviour changes depending on the value of ARRANGEMENT. 

~~~

Iterstate and iterall allow you to gain some insights into the vectors/matrices you're looking at. If HOVERMODE is enabled (see documentation for .config file), then clicking on any of the vectors on screen will print out info regarding the vector you clicked, such as which vectors landed on it that iteration, where the vector travelled to that iteration, etc.

~~~

If CAPTUREMODE is enabled (see documentation for .config file), ORBITVIS will generate every possible configuration with the given settings and save them as screenshots. ORBITVIS knows to automatically stop generating screenshots when the vectors fall into a cycle. If, however, the user only wants to generate a few screenshots and not the entire cycle, the "maxcaptures" key can be set in the .config file.

Note that CAPTUREMODE does not work when CMODE is set to "cycles".